import numpy as np
import matplotlib.pyplot as plt

def generate_isotropic_directions(num_particles):

    directions = []
    while len(directions) < num_particles:
        x, y, z = np.random.uniform(-1, 1, 3)
        r = np.sqrt(x ** 2 + y ** 2 + z ** 2)

        if 0.001 < r <= 1.0:
            directions.append([x / r, y / r, z / r])

    return np.array(directions)

def calculate_hits(L_values, R, num_particles):

    hit_percentages = []
    directions = generate_isotropic_directions(num_particles)

    for L in L_values:

        n_components = directions[:, 2]
        a = 1.0
        b = 2 * L * n_components
        c = L ** 2 - R ** 2

        discriminant = b ** 2 - 4 * a * c
        valid = discriminant >= 0

        t1 = np.full(num_particles, -1.0)
        t2 = np.full(num_particles, -1.0)
        t1[valid] = (-b[valid] + np.sqrt(discriminant[valid])) / (2 * a)
        t2[valid] = (-b[valid] - np.sqrt(discriminant[valid])) / (2 * a)

        hits = np.sum((t1 > 0) | (t2 > 0))
        percentage = (hits / num_particles) * 100
        hit_percentages.append(percentage)

    return hit_percentages

def plot_results(L_values, hit_percentages, R):

    plt.figure(figsize=(10, 6))
    line, = plt.plot(L_values, hit_percentages, 'b-o', linewidth=2, markersize=6, label='Процент попаданий')
    plt.xlabel('Расстояние от источника до центра сферы (L)')
    plt.ylabel('Процент попаданий (%)')
    plt.title(f'Зависимость процента попаданий в сферу (R={R}) от расстояния')
    #plt.grid(True)
    plt.legend(handles=[line, plt.axvline(x=0, visible=False, label=f'R={R}')])
    plt.show()

R = 1.0
num_particles = 10000
L_values = np.linspace(0.1, 3.0, 50)

hit_percentages = calculate_hits(L_values, R, num_particles)

for L, perc in zip(L_values, hit_percentages):
    print(f"L = {L:.2f}: {perc:.2f}% частиц попало в сферу")

plot_results(L_values, hit_percentages, R)
