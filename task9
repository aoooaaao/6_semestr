import random
import time
from multiprocessing import Pool, cpu_count

start_time = time.time()

def monte_carlo_circle(args):
    R, x0, y0, A, B, N = args
    inside = 0

    for _ in range(N):
        x = random.uniform(x0 - A / 2, x0 + A / 2)
        y = random.uniform(y0 - B / 2, y0 + B / 2)

        if (x - x0) ** 2 + (y - y0) ** 2 <= R ** 2:
            inside += 1

    circle_area_estimate = (inside / N) * A * B
    return circle_area_estimate

def calculate_mat_and_dispersia(estimates):
    m = len(estimates)
    mat = sum(estimates) / m
    dispersia = sum((x - mat) ** 2 for x in estimates) / m
    return mat, dispersia

R = 1
x0 = 0
y0 = 0
A = 2
B = 2
N = 10000

if __name__ == '__main__':

    args = [(R, x0, y0, A, B, N) for _ in range(200)]

    with Pool(cpu_count()) as pool:
        estimates = pool.map(monte_carlo_circle, args)

    expectation, dispersia = calculate_mat_and_dispersia(estimates)

    print(f"Математическое ожидание: {expectation}")
    print(f"Дисперсия: {dispersia}")

    end_time = time.time()
    execution_time = end_time - start_time
    print(f"Время выполнения программы: {execution_time:.2f} секунд")
